version: '3.8'

services:
  nginx:
    build:
      context: ../../nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend
    networks:
      - chatbot-network

  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile
      target: development
    volumes:
      - ../../backend:/app
      - /app/node_modules
    ports:
      - "4000:4000"
    env_file:
      - .env
    depends_on:
      - mongodb
      - postgres
      - redis
      - rabbitmq
    networks:
      - chatbot-network
    command: npm run dev

  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
      target: development
    volumes:
      - ../../frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    env_file:
      - .env
    networks:
      - chatbot-network
    command: npm start

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - chatbot-network

  postgres:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - chatbot-network

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - chatbot-network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - chatbot-network

networks:
  chatbot-network:
    driver: bridge

volumes:
  mongodb_data:
  postgres_data:
  redis_data:
  rabbitmq_data:
